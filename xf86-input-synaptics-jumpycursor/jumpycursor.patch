Only in src.new//xf86-input-synaptics-1.2.1: config.h
Only in src.new//xf86-input-synaptics-1.2.1: config.status
diff -ur src/xf86-input-synaptics-1.2.1/fdi/11-x11-synaptics.fdi src.new//xf86-input-synaptics-1.2.1/fdi/11-x11-synaptics.fdi
--- src/xf86-input-synaptics-1.2.1/fdi/11-x11-synaptics.fdi	2009-10-12 01:11:21.000000000 +0200
+++ src.new//xf86-input-synaptics-1.2.1/fdi/11-x11-synaptics.fdi	2010-05-03 20:37:30.000000000 +0200
@@ -26,6 +26,17 @@
 
 	For other possible options, check CONFIGURATION DETAILS in synaptics man page
         -->
+        <match key="/org/freedesktop/Hal/devices/computer:system.hardware.product" string="Inspiron 1011">
+            <merge key="input.x11_options.JumpyCursorThreshold" type="string">90</merge>
+            <merge key="input.x11_options.AreaBottomEdge" type="string">4100</merge>
+        </match>
+        <match key="/org/freedesktop/Hal/devices/computer:system.hardware.product" string="Inspiron 1012">
+            <merge key="input.x11_options.JumpyCursorThreshold" type="string">90</merge>
+            <merge key="input.x11_options.AreaBottomEdge" type="string">4100</merge>
+        </match>
+        <match key="/org/freedesktop/Hal/devices/computer:system.hardware.product" string="HP MiniNote 1000">
+            <merge key="input.x11_options.JumpyCursorThreshold" type="string">200</merge>
+        </match>
     </match>
   </device>
 </deviceinfo>
Only in src.new//xf86-input-synaptics-1.2.1/fdi: Makefile
Only in src.new//xf86-input-synaptics-1.2.1/include: Makefile
diff -ur src/xf86-input-synaptics-1.2.1/include/synaptics.h src.new//xf86-input-synaptics-1.2.1/include/synaptics.h
--- src/xf86-input-synaptics-1.2.1/include/synaptics.h	2009-12-11 04:36:32.000000000 +0100
+++ src.new//xf86-input-synaptics-1.2.1/include/synaptics.h	2010-05-03 20:30:35.000000000 +0200
@@ -63,6 +63,7 @@
     Bool middle;
     int guest_left, guest_mid, guest_right; /* guest device buttons */
     int guest_dx, guest_dy; 		    /* guest device movement */
+    int jumpycursor_threshold;      /* jumpy cursor threshold */
 } SynapticsSHM;
 
 /*
Only in src.new//xf86-input-synaptics-1.2.1/include: synaptics.h.orig
diff -ur src/xf86-input-synaptics-1.2.1/include/synaptics-properties.h src.new//xf86-input-synaptics-1.2.1/include/synaptics-properties.h
--- src/xf86-input-synaptics-1.2.1/include/synaptics-properties.h	2009-11-02 02:16:04.000000000 +0100
+++ src.new//xf86-input-synaptics-1.2.1/include/synaptics-properties.h	2010-05-03 20:29:23.000000000 +0200
@@ -155,4 +155,7 @@
 /* 32 bit, 4 values, left, right, top, bottom */
 #define SYNAPTICS_PROP_AREA "Synaptics Area"
 
+/* 32 bit */
+#define SYNAPTICS_PROP_JUMPYCURSOR_THRESHOLD "Synaptics Jumpy Cursor Threshold"
+
 #endif /* _SYNAPTICS_PROPERTIES_H_ */
Only in src.new//xf86-input-synaptics-1.2.1/include: synaptics-properties.h.orig
Only in src.new//xf86-input-synaptics-1.2.1: libtool
Only in src.new//xf86-input-synaptics-1.2.1/man: Makefile
diff -ur src/xf86-input-synaptics-1.2.1/man/synaptics.man src.new//xf86-input-synaptics-1.2.1/man/synaptics.man
--- src/xf86-input-synaptics-1.2.1/man/synaptics.man	2009-12-11 04:46:18.000000000 +0100
+++ src.new//xf86-input-synaptics-1.2.1/man/synaptics.man	2010-05-03 20:29:23.000000000 +0200
@@ -509,6 +509,14 @@
 The option is disabled by default and can be enabled by setting the
 AreaBottomEdge option to any integer value other than zero. Property: "Synaptics Area"
 .
+.TP
+.BI "Option \*qJumpyCursorThreshold\*q \*q" integer \*q
+Set the threshold above which movement events are ignored on single-touch touchpads.
+.
+The option is disabled by default and can be enabled by setting the
+JumpyCursorThreshold option to any integer value other than zero. Property: "Synaptics 
+Jumpy Cursor Threshold"
+.
 .LP
 A tap event happens when the finger is touched and released in a time
 interval shorter than MaxTapTime, and the touch and release
@@ -870,6 +878,14 @@
 .BI "Synaptics Pad Resolution"
 32 bit unsigned, 2 values (read-only), vertical, horizontal in units/millimeter.
 
+.TP 7
+.BI "Synaptics Jumpy Cursor Threshold"
+The Synaptics Jumpy Cursor Threshold parameter is used to suppress movements (which
+take place in 20 milliseconds or less) whose covered distance is greater than or
+equal to the threshold on single-touch touchpads. This property is disabled by default.
+
+32 bit, 1 value. 0 disables the property.
+
 .SH "NOTES"
 There is an example hal policy file in
 .I ${sourcecode}/fdi/11-x11-synaptics.fdi
Only in src.new//xf86-input-synaptics-1.2.1/man: synaptics.man.orig
Only in src.new//xf86-input-synaptics-1.2.1/src: .deps
Only in src.new//xf86-input-synaptics-1.2.1/src: Makefile
diff -ur src/xf86-input-synaptics-1.2.1/src/properties.c src.new//xf86-input-synaptics-1.2.1/src/properties.c
--- src/xf86-input-synaptics-1.2.1/src/properties.c	2009-12-11 04:36:32.000000000 +0100
+++ src.new//xf86-input-synaptics-1.2.1/src/properties.c	2010-05-03 20:33:02.000000000 +0200
@@ -84,6 +84,7 @@
 Atom prop_capabilities          = 0;
 Atom prop_resolution            = 0;
 Atom prop_area                  = 0;
+Atom prop_jumpycursor_threshold = 0;
 
 static Atom
 InitAtom(DeviceIntPtr dev, char *name, int format, int nvalues, int *values)
@@ -264,6 +265,7 @@
     values[3] = priv->has_double;
     values[4] = priv->has_triple;
     prop_capabilities = InitAtom(local->dev, SYNAPTICS_PROP_CAPABILITIES, 8, 5, values);
+    prop_jumpycursor_threshold = InitAtom(local->dev, SYNAPTICS_PROP_JUMPYCURSOR_THRESHOLD, 32, 1, &para->jumpycursor_threshold);
 
     values[0] = para->resolution_vert;
     values[1] = para->resolution_horiz;
@@ -620,6 +622,13 @@
             return BadMatch;
 
         para->grab_event_device = *(BOOL*)prop->data;
+    
+    } else if (property == prop_jumpycursor_threshold)
+    {
+        if (prop->size != 1 || prop->format != 32 || prop->type != XA_INTEGER)
+            return BadMatch;
+
+        para->jumpycursor_threshold = *(INT32*)prop->data;
     } else if (property == prop_capabilities)
     {
         /* read-only */
Only in src.new//xf86-input-synaptics-1.2.1/src: properties.c.orig
diff -ur src/xf86-input-synaptics-1.2.1/src/synaptics.c src.new//xf86-input-synaptics-1.2.1/src/synaptics.c
--- src/xf86-input-synaptics-1.2.1/src/synaptics.c	2009-12-11 04:46:39.000000000 +0100
+++ src.new//xf86-input-synaptics-1.2.1/src/synaptics.c	2010-05-03 20:34:07.000000000 +0200
@@ -134,6 +134,9 @@
 static void ScaleCoordinates(SynapticsPrivate *priv, struct SynapticsHwState *hw);
 static void CalculateScalingCoeffs(SynapticsPrivate *priv);
 
+int old_time_millis = 0;
+Bool was_time_skipped = FALSE;
+
 #if GET_ABI_MAJOR(ABI_XINPUT_VERSION) >= 3
 void InitDeviceProperties(LocalDevicePtr local);
 int SetProperty(DeviceIntPtr dev, Atom property, XIPropertyValuePtr prop,
@@ -533,6 +536,7 @@
     pars->press_motion_min_factor = xf86SetRealOption(opts, "PressureMotionMinFactor", 1.0);
     pars->press_motion_max_factor = xf86SetRealOption(opts, "PressureMotionMaxFactor", 1.0);
     pars->grab_event_device = xf86SetBoolOption(opts, "GrabEventDevice", TRUE);
+    pars->jumpycursor_threshold = xf86SetIntOption(opts, "JumpyCursorThreshold", 0);
     pars->tap_and_drag_gesture = xf86SetBoolOption(opts, "TapAndDragGesture", TRUE);
     pars->resolution_horiz = xf86SetIntOption(opts, "HorizResolution", horizResolution);
     pars->resolution_vert = xf86SetIntOption(opts, "VertResolution", vertResolution);
@@ -1573,11 +1577,12 @@
 #define HIST(a) (priv->move_hist[((priv->hist_index - (a) + SYNAPTICS_MOVE_HISTORY) % SYNAPTICS_MOVE_HISTORY)])
 
 static void
-store_history(SynapticsPrivate *priv, int x, int y, unsigned int millis)
+store_history(SynapticsPrivate *priv, int x, int y, int num_fingers, unsigned int millis)
 {
     int idx = (priv->hist_index + 1) % SYNAPTICS_MOVE_HISTORY;
     priv->move_hist[idx].x = x;
     priv->move_hist[idx].y = y;
+    priv->move_hist[idx].num_fingers = num_fingers;
     priv->move_hist[idx].millis = millis;
     priv->hist_index = idx;
 }
@@ -1726,11 +1731,70 @@
 	dy += hw->guest_dy;
     }
 
+    /* Handle quirks here */
+    if (dx || dy) {
+        /* Work around issues caused by two fingers on multi-touch
+         * models
+         */
+        if (priv->has_double) {
+            if ((hw->numFingers < 2) &&
+                ((HIST(0).num_fingers >= 2) || (HIST(1).num_fingers >= 2) ||
+                 (HIST(2).num_fingers >= 2) || (HIST(3).num_fingers >= 2) )) {
+                dx = dy = 0;
+            }
+            old_time_millis = hw->millis;
+        }
+        /* Work around issues caused by two fingers on single-touch
+         * models
+         */
+        else {
+            /* If para->jumpycursor_threshold <= 0, quirks are not
+             * available
+             */
+            if (para->jumpycursor_threshold <= 0)
+                goto post_quirks;
+
+            int elapsed_time = hw->millis - HIST(0).millis;
+
+            /* Ignore deltas as they couldn't possibly happen in so little time */
+            if (elapsed_time <= 20 && (abs(dx) >= para->jumpycursor_threshold || abs(dy) >= para->jumpycursor_threshold)) {
+                dx = dy = 0.0;
+                was_time_skipped = FALSE;
+            }
+            /* A comparison between the timestamp in priv->move_hist and hw->millis shows
+             * that something went wrong and that an event was skipped, hence the deltas
+             * are wrong.
+             * Let's ignore the deltas and append the skipped event to priv->move_hist
+             * otherwise the next deltas will be wrong too.
+             */
+            else if (old_time_millis > 0 && (HIST(0).millis != old_time_millis)) {
+                dx = dy = 0.0;
+                was_time_skipped = TRUE;
+            }
+            /* Something went wrong and an event was previously skipped, hence these deltas
+             * are wrong.
+             * Let's ignore the deltas and set was_time_skipped to FALSE as the next deltas
+             * should be good.
+             */
+            else {
+                if (was_time_skipped) {
+                    dx = 0.0;
+                    dy = 0.0;
+                }
+                was_time_skipped = FALSE;
+            }
+
+            old_time_millis = hw->millis;
+        }
+
+    }
+post_quirks:
+
     *dxP = dx;
     *dyP = dy;
 
     /* generate a history of the absolute positions */
-    store_history(priv, hw->x, hw->y, hw->millis);
+    store_history(priv, hw->x, hw->y, hw->numFingers, hw->millis);
 
     return delay;
 }
Only in src.new//xf86-input-synaptics-1.2.1/src: synaptics.c.orig
diff -ur src/xf86-input-synaptics-1.2.1/src/synapticsstr.h src.new//xf86-input-synaptics-1.2.1/src/synapticsstr.h
--- src/xf86-input-synaptics-1.2.1/src/synapticsstr.h	2009-12-11 04:46:10.000000000 +0100
+++ src.new//xf86-input-synaptics-1.2.1/src/synapticsstr.h	2010-05-03 20:43:13.000000000 +0200
@@ -33,6 +33,7 @@
 typedef struct _SynapticsMoveHist
 {
     int x, y;
+    int num_fingers;
     int millis;
 } SynapticsMoveHistRec;
 
@@ -149,6 +150,7 @@
     unsigned int resolution_horiz;          /* horizontal resolution of touchpad in units/mm */
     unsigned int resolution_vert;           /* vertical resolution of touchpad in units/mm */
     int area_left_edge, area_right_edge, area_top_edge, area_bottom_edge; /* area coordinates absolute */
+    int jumpycursor_threshold;
 } SynapticsParameters;
 
 
Only in src.new//xf86-input-synaptics-1.2.1: stamp-h1
Only in src.new//xf86-input-synaptics-1.2.1/tools: .deps
Only in src.new//xf86-input-synaptics-1.2.1/tools: Makefile
diff -ur src/xf86-input-synaptics-1.2.1/tools/synclient.c src.new//xf86-input-synaptics-1.2.1/tools/synclient.c
--- src/xf86-input-synaptics-1.2.1/tools/synclient.c	2009-12-11 04:46:10.000000000 +0100
+++ src.new//xf86-input-synaptics-1.2.1/tools/synclient.c	2010-05-03 20:39:19.000000000 +0200
@@ -143,6 +143,7 @@
     {"AreaRightEdge",         PT_INT,    0, 10000, SYNAPTICS_PROP_AREA,	32,	1},
     {"AreaTopEdge",           PT_INT,    0, 10000, SYNAPTICS_PROP_AREA,	32,	2},
     {"AreaBottomEdge",        PT_INT,    0, 10000, SYNAPTICS_PROP_AREA,	32,	3},
+    {"jumpycursor_threshold",  PT_INT,    0, 1000,SYNAPTICS_PROP_JUMPYCURSOR_THRESHOLD,	32,	0},
     { NULL, 0, 0, 0, 0 }
 };
 
Only in src.new//xf86-input-synaptics-1.2.1/tools: synclient.c.orig
Only in src.new//xf86-input-synaptics-1.2.1: xorg-synaptics.pc
